{"version":3,"sources":["components/WordInput.js","components/WordList.js","components/Underline.js","components/Alpha.js","App.js","reportWebVitals.js","index.js"],"names":["WordInput","props","onSubmit","className","onInput","id","type","placeholder","value","word","WordList","words","map","index","Underline","split","letter","Alpha","sort","sortWords","App","useState","setWord","updateWords","e","target","preventDefault","arr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAceA,EAdG,SAACC,GAAD,OACd,sBAAMC,SAAUD,EAAMC,SAAtB,SACI,qBAAKC,UAAU,eAAf,SACI,uBACIC,QAASH,EAAMG,QACfC,GAAG,OACHC,KAAK,OACLC,YAAY,eACZC,MAAOP,EAAMQ,YCAdC,EARE,SAACT,GAAD,OACb,oBAAIE,UAAU,YAAd,SACKF,EAAMU,MAAMC,KAAI,SAACH,EAAMI,GAAP,OACb,oBAAIV,UAAU,OAAd,SAAsBM,UCOnBK,EAVG,SAACb,GACf,OACI,6BACKA,EAAMQ,KAAKM,MAAM,IAAIH,KAAI,SAACI,GAAD,OACtB,mBAAGb,UAAU,oBCE7B,IAYec,EAZD,SAAChB,GACX,IAAMU,EALV,SAAmBA,GACf,OAAOA,EAAMO,OAICC,CAAUlB,EAAMU,OAE9B,OACI,6BACKA,EAAMC,KAAI,SAACH,GAAD,OACP,cAAC,EAAD,CAAWA,KAAMA,UCwBlBW,EA9BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACPZ,EADO,KACDa,EADC,OAEeD,mBAAS,IAFxB,mBAEPV,EAFO,KAEAY,EAFA,KAcd,OACI,sBAAKpB,UAAU,MAAf,UACI,wBAAQA,UAAU,aAAlB,SACI,gDAEJ,yBAASA,UAAU,WAAnB,SACI,cAAC,EAAD,CAAWC,QAhBP,SAACoB,GACbF,EAAQE,EAAEC,OAAOjB,QAeoBN,SAZxB,SAACsB,GACdA,EAAEE,iBACFH,GAAY,SAACI,GAAD,4BAAaA,GAAb,CAAkBlB,OAC9Ba,EAAQ,KASiDb,KAAMA,MAE3D,0BAASN,UAAU,SAAnB,UACI,cAAC,EAAD,CAAUQ,MAAOA,IACjB,cAAC,EAAD,CAAOA,MAAOA,WClBfiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.60daf5b4.chunk.js","sourcesContent":["const WordInput = (props) => (\n    <form onSubmit={props.onSubmit}>\n        <div className=\"form-control\">\n            <input\n                onInput={props.onInput}\n                id=\"word\"\n                type=\"text\"\n                placeholder=\"Enter a word\"\n                value={props.word}\n            />\n        </div>\n    </form>\n);\n\nexport default WordInput;\n","const WordList = (props) => (\n    <ul className=\"word-list\">\n        {props.words.map((word, index) => (\n            <li className=\"word\">{word}</li>\n        ))}\n    </ul>\n);\n\nexport default WordList;\n","const Underline = (props) => {\n    return (\n        <li>\n            {props.word.split('').map((letter) => (\n                <p className=\"underline\"></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Underline;\n","import Underline from './Underline';\n\nfunction sortWords(words) {\n    return words.sort();\n}\n\nconst Alpha = (props) => {\n    const words = sortWords(props.words);\n\n    return (\n        <ol>\n            {words.map((word) => (\n                <Underline word={word} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Alpha;\n","import './App.scss';\nimport WordInput from './components/WordInput';\nimport WordList from './components/WordList';\nimport { useState } from 'react';\nimport Alpha from './components/Alpha';\n\nconst App = () => {\n    const [word, setWord] = useState('');\n    const [words, updateWords] = useState([]);\n\n    const onInput = (e) => {\n        setWord(e.target.value);\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        updateWords((arr) => [...arr, word]);\n        setWord('');\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Alphabetical</h1>\n            </header>\n            <section className=\"no-print\">\n                <WordInput onInput={onInput} onSubmit={onSubmit} word={word} />\n            </section>\n            <section className=\"output\">\n                <WordList words={words} />\n                <Alpha words={words} />\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
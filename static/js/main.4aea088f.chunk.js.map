{"version":3,"sources":["components/Underline.js","components/Alpha.js","components/Box.js","components/Shuffle.js","components/Boxes.js","components/Sentences.js","components/Syllables.js","components/SyllablesInput.js","components/WordInput.js","components/WordList.js","components/SentenceInput.js","components/AddButton.js","App.js","reportWebVitals.js","index.js"],"names":["Underline","props","letters","word","split","map","letter","index","className","mode","Alpha","words","sort","a","b","sortWords","toLowerCase","isHanging","isTall","l","includes","Box","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Boxes","replaceWord","sentence","_s","forEach","replace","Sentences","onlyUnique","value","self","indexOf","Syllables","syls","syllableGroupings","element","push","syllables","filter","getSyllableGroups","syl","wordIndex","SyllablesInput","htmlFor","id","type","min","max","onInput","WordInput","placeholder","WordList","SentenceInput","AddButton","onClick","App","useState","setWord","updateWords","setMode","setSyllables","setSentence","onChange","e","options","label","alphabetical","boxes","sentences","target","parseInt","arr","document","getElementById","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4aea088f.chunk.js","sourcesContent":["const Underline = (props) => {\n    const letters = props.word.split('');\n    return (\n        <li>\n            {letters.map((letter, index) => (\n                <p\n                    key={`${props.mode}-underline-${index}`}\n                    className=\"underline\"\n                ></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Underline;\n","import Underline from './Underline';\n\nfunction sortWords(words) {\n    words = words.sort((a, b) => {\n        if (a.word < b.word) {\n            return -1;\n        }\n        if (a.word > b.word) {\n            return 1;\n        }\n        return 0;\n    });\n\n    return words;\n}\n\nconst Alpha = (props) => {\n    const words = sortWords(props.words);\n    return (\n        <ol>\n            {words.map((word, index) => (\n                <Underline\n                    mode=\"alpha\"\n                    word={word.word}\n                    index={index}\n                    key={`alpha-${index}`}\n                />\n            ))}\n        </ol>\n    );\n};\n\nexport default Alpha;\n","const className = (letter) => {\n    letter = letter.toLowerCase();\n\n    if (isHanging(letter)) {\n        return 'letter hanging';\n    }\n\n    if (isTall(letter)) {\n        return 'letter tall';\n    }\n\n    return 'letter';\n};\n\nconst isHanging = (l) => {\n    return ['q', 'y', 'p', 'g', 'j'].includes(l);\n};\n\nconst isTall = (l) => {\n    return ['t', 'd', 'f', 'h', 'l', 'b'].includes(l);\n};\n\nconst Box = (props) => {\n    return (\n        <li key={`box-${props.index}`}>\n            {props.word.split('').map((letter, index) => (\n                <p key={`letter-${index}`} className={className(letter)}></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Box;\n","export const shuffle = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n","import Box from './Box';\nimport { shuffle } from './Shuffle';\n\nconst Boxes = (props) => {\n    const words = shuffle(props.words);\n    return (\n        <ol>\n            {words.map((word, index) => (\n                <Box word={word.word} index={index} key={index} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Boxes;\n","import { shuffle } from './Shuffle';\n\nconst replaceWord = (word, sentence) => {\n    let _s = '';\n    word.split('').forEach(() => {\n        _s += '_';\n    });\n    return sentence.replace(word, _s);\n};\nconst Sentences = (props) => {\n    const words = shuffle(props.words);\n    return (\n        <div>\n            {words.map((word, index) => (\n                <p className=\"sentence\" key={`sentence-${index}`}>\n                    {replaceWord(word.word, word.sentence)}\n                </p>\n            ))}\n        </div>\n    );\n};\n\nexport default Sentences;\n","import Underline from './Underline';\n\nconst getSyllableGroups = (array) => {\n    let syllableGroupings = [];\n    array.forEach((element) => {\n        syllableGroupings.push(element.syllables);\n    });\n    return syllableGroupings.filter(onlyUnique).sort();\n};\n\nconst onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n};\n\nconst Syllables = (props) => {\n    const syls = getSyllableGroups(props.words);\n    return (\n        <div>\n            {syls.map((syl, index) => (\n                <div key={`syllables-div-${index}`}>\n                    <h2 key={`syllables-header-${index}`}>\n                        {`${syl} Syllables`}\n                    </h2>\n                    <ol key={`syllables-list-${index}`}>\n                        {props.words.map((word, wordIndex) => {\n                            if (word.syllables === syl) {\n                                return (\n                                    <Underline\n                                        key={`syllables-${wordIndex}`}\n                                        mode=\"syllables\"\n                                        index={wordIndex}\n                                        word={word.word}\n                                    />\n                                );\n                            }\n                            return null;\n                        })}\n                    </ol>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Syllables;\n","const SyllablesInput = (props) => (\n    <>\n        <label htmlFor=\"syllables\">Syllables</label>\n        <input\n            id=\"syllables\"\n            type=\"number\"\n            min=\"1\"\n            max=\"7\"\n            value={props.value}\n            onInput={props.onInput}\n        />\n    </>\n);\n\nexport default SyllablesInput;\n","const WordInput = (props) => (\n    <div className=\"form-control\">\n        <input\n            onInput={props.onInput}\n            id=\"word\"\n            type=\"text\"\n            placeholder=\"Enter a word\"\n            value={props.word}\n        />\n    </div>\n);\n\nexport default WordInput;\n","const WordList = (props) => (\n    <ul className=\"word-list\">\n        {props.words.map((word, index) => (\n            <li key={index} className=\"word\">\n                {word.word}\n            </li>\n        ))}\n    </ul>\n);\n\nexport default WordList;\n","const SentenceInput = (props) => (\n    <>\n        <label htmlFor=\"sentence\">Sentence</label>\n        <input onInput={props.onInput} id=\"sentence\" value={props.value} />\n    </>\n);\n\nexport default SentenceInput;\n","const AddButton = (props) => (\n    <button onClick={props.onClick} className=\"btn\">\n        Add\n    </button>\n);\n\nexport default AddButton;\n","import { useState } from 'react';\nimport Select from 'react-select';\nimport Alpha from './components/Alpha';\nimport Boxes from './components/Boxes';\nimport Sentences from './components/Sentences';\nimport Syllables from './components/Syllables';\nimport SyllablesInput from './components/SyllablesInput';\nimport WordInput from './components/WordInput';\nimport WordList from './components/WordList';\nimport SentenceInput from './components/SentenceInput';\nimport AddButton from './components/AddButton';\nimport './App.scss';\n\nconst App = () => {\n    const [word, setWord] = useState('');\n    const [words, updateWords] = useState([]);\n    const [mode, setMode] = useState('alphabetical');\n    const [syllables, setSyllables] = useState(1);\n    const [sentence, setSentence] = useState('');\n    const options = [\n        { value: 'alphabetical', label: 'Alphabetical' },\n        { value: 'boxes', label: 'Boxes' },\n        { value: 'syllables', label: 'Syllables' },\n        { value: 'sentences', label: 'Sentences' }\n    ];\n\n    const onInput = (e) => {\n        setWord(e.target.value.toLowerCase());\n    };\n\n    const onAddWord = () => {\n        if (word.length && sentence.length) {\n            updateWords((arr) => [\n                ...arr,\n                { word: word, syllables: syllables, sentence: sentence }\n            ]);\n            setWord('');\n            setSentence('');\n            setSyllables(1);\n            document.getElementById('word').focus();\n        }\n    };\n\n    const onChange = (e) => {\n        setMode(e.value);\n    };\n\n    const syllablesInput = (e) => {\n        setSyllables(parseInt(e.target.value));\n    };\n\n    const sentenceInput = (e) => {\n        setSentence(e.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div className=\"select-container no-print\">\n                    <Select onChange={onChange} options={options} />\n                </div>\n                <div className=\"print\">\n                    <h1>{mode}</h1>\n                    {\n                        {\n                            alphabetical: `Arrange the words from the list in alphabetical order.`,\n                            boxes: `Fill in the correct boxes with the words from the list.`,\n                            syllables: `Group the words by the number of syllables they have.`,\n                            sentences: `Fill in the words in the sentences below.`\n                        }[mode]\n                    }\n                </div>\n            </header>\n            <section className=\"no-print\">\n                <div className=\"input\">\n                    <WordInput onInput={onInput} word={word} />\n                    <SyllablesInput\n                        onInput={syllablesInput}\n                        value={syllables}\n                    />\n                    <SentenceInput onInput={sentenceInput} value={sentence} />\n                </div>\n                <AddButton onClick={onAddWord} />\n            </section>\n            <section className=\"output\">\n                {words.length > 0 && <WordList words={words} />}\n                {words.length > 0 &&\n                    {\n                        alphabetical: <Alpha words={words} />,\n                        boxes: <Boxes words={words} />,\n                        syllables: <Syllables words={words} />,\n                        sentences: <Sentences words={words} />\n                    }[mode]}\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
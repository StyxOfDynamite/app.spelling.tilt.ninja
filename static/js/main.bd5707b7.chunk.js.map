{"version":3,"sources":["components/WordInput.js","components/WordList.js","components/Box.js","components/Boxes.js","components/Underline.js","components/Alpha.js","components/SyllablesInput.js","components/SentenceInput.js","components/Syllables.js","components/AddButton.js","App.js","reportWebVitals.js","index.js"],"names":["WordInput","props","className","onInput","id","type","placeholder","value","word","WordList","words","map","index","letter","toLowerCase","isHanging","isTall","l","includes","Box","split","Boxes","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","Underline","Alpha","sort","a","b","sortWords","SyllablesInput","htmlFor","min","max","SentenceInput","onlyUnique","self","indexOf","Syllables","syls","syllableGroupings","forEach","element","push","syllables","filter","getSyllableGroups","syl","AddButton","onClick","App","useState","setWord","updateWords","mode","setMode","setSyllables","sentence","setSentence","onChange","e","target","preventDefault","parseInt","arr","alphabetical","boxes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd5707b7.chunk.js","sourcesContent":["const WordInput = (props) => (\n    <div className=\"form-control\">\n        <input\n            onInput={props.onInput}\n            id=\"word\"\n            type=\"text\"\n            placeholder=\"Enter a word\"\n            value={props.word}\n        />\n    </div>\n);\n\nexport default WordInput;\n","const WordList = (props) => (\n    <ul className=\"word-list\">\n        {props.words.map((word, index) => (\n            <li key={index} className=\"word\">\n                {word.word}\n            </li>\n        ))}\n    </ul>\n);\n\nexport default WordList;\n","const className = (letter) => {\n    letter = letter.toLowerCase();\n\n    if (isHanging(letter)) {\n        return 'letter hanging';\n    }\n\n    if (isTall(letter)) {\n        return 'letter tall';\n    }\n\n    return 'letter';\n};\n\nconst isHanging = (l) => {\n    return ['q', 'y', 'p', 'g', 'j'].includes(l);\n};\n\nconst isTall = (l) => {\n    return ['t', 'd', 'f', 'h', 'l', 'b'].includes(l);\n};\n\nconst Box = (props) => {\n    return (\n        <li key={`box-${props.index}`}>\n            {props.word.split('').map((letter, index) => (\n                <p key={`letter-${index}`} className={className(letter)}></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Box;\n","import Box from './Box';\n\nconst shuffle = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\nconst Boxes = (props) => {\n    const words = shuffle(props.words);\n    return (\n        <ol>\n            {props.words.map((word, index) => (\n                <Box word={word.word} index={index} key={index} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Boxes;\n","const Underline = (props) => {\n    return (\n        <li key={props.index}>\n            {props.word.split('').map((letter, index) => (\n                <p key={index} className=\"underline\">\n                    {props.className}\n                </p>\n            ))}\n        </li>\n    );\n};\n\nexport default Underline;\n","import Underline from './Underline';\nimport { useEffect } from 'react';\n\nfunction sortWords(words) {\n    words = words.sort((a, b) => {\n        if (a.word < b.word) {\n            return -1;\n        }\n        if (a.word > b.word) {\n            return 1;\n        }\n        return 0;\n    });\n\n    return words;\n}\n\nconst Alpha = (props) => {\n    const words = sortWords(props.words);\n    return (\n        <ol>\n            {words.map((word, index) => (\n                <Underline word={word.word} index={index} key={index} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Alpha;\n","const SyllablesInput = (props) => (\n    <>\n        <label htmlFor=\"syllables\">Syllables</label>\n        <input\n            id=\"syllables\"\n            type=\"number\"\n            min=\"1\"\n            max=\"7\"\n            value={props.value}\n            onInput={props.onInput}\n        />\n    </>\n);\n\nexport default SyllablesInput;\n","const SentenceInput = (props) => (\n    <>\n        <label htmlFor=\"sentence\">Sentence</label>\n        <textarea id=\"sentence\"></textarea>\n    </>\n);\n\nexport default SentenceInput;\n","import Underline from './Underline';\n\nconst getSyllableGroups = (array) => {\n    let syllableGroupings = [];\n    array.forEach((element) => {\n        syllableGroupings.push(element.syllables);\n    });\n    return syllableGroupings.filter(onlyUnique).sort();\n};\n\nconst onlyUnique = (value, index, self) => {\n    return self.indexOf(value) === index;\n};\n\nconst Syllables = (props) => {\n    const syls = getSyllableGroups(props.words);\n    return (\n        <div>\n            {syls.map((syl, index) => (\n                <div>\n                    <h2 key={`header-${index}`}>{`${syl} Syllables`}</h2>\n                    {props.words.map((word) => {\n                        if (word.syllables === syl) {\n                            return <Underline word={word.word} />;\n                        }\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Syllables;\n","const AddButton = (props) => (\n    <button onClick={props.onClick} className=\"btn\">\n        Add\n    </button>\n);\n\nexport default AddButton;\n","import './App.scss';\nimport WordInput from './components/WordInput';\nimport WordList from './components/WordList';\nimport { useState } from 'react';\nimport Boxes from './components/Boxes';\nimport Alpha from './components/Alpha';\nimport SyllablesInput from './components/SyllablesInput';\nimport SentenceInput from './components/SentenceInput';\nimport Syllables from './components/Syllables';\nimport AddButton from './components/AddButton';\n\nconst App = () => {\n    const [word, setWord] = useState('');\n    const [words, updateWords] = useState([]);\n    const [mode, setMode] = useState('alphabetical');\n    const [syllables, setSyllables] = useState(1);\n    const [sentence, setSentence] = useState('');\n\n    const onInput = (e) => {\n        e.preventDefault();\n        setWord(e.target.value);\n    };\n\n    const onAddWord = () => {\n        updateWords((arr) => [...arr, { word: word, syllables: syllables }]);\n        setWord('');\n    };\n\n    const onChange = (e) => {\n        setMode(e.target.value);\n    };\n\n    const syllablesInput = (e) => {\n        setSyllables(parseInt(e.target.value));\n    };\n\n    const sentenceInput = (e) => {\n        setSentence(e.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <select onChange={onChange} className=\"no-print\">\n                    <option value=\"alphabetical\">Alphabetical</option>\n                    <option value=\"boxes\">Boxes</option>\n                    <option value=\"syllables\">Syllables</option>\n                </select>\n                <h1>{mode}</h1>\n            </header>\n            <section className=\"no-print\">\n                <div className=\"input\">\n                    <WordInput onInput={onInput} word={word} />\n                    <SyllablesInput\n                        onInput={syllablesInput}\n                        value={syllables}\n                    />\n                    <SentenceInput onInput={sentenceInput} value={sentence} />\n                </div>\n                <AddButton onClick={onAddWord} />\n            </section>\n            <section className=\"output\">\n                {words.length > 0 && <WordList words={words} />}\n                {words.length > 0 &&\n                    {\n                        alphabetical: <Alpha words={words} />,\n                        boxes: <Boxes words={words} />,\n                        syllables: <Syllables words={words} />\n                    }[mode]}\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/WordInput.js","components/WordList.js","components/Box.js","components/Boxes.js","components/Underline.js","components/Alpha.js","App.js","reportWebVitals.js","index.js"],"names":["WordInput","props","onSubmit","className","onInput","id","type","placeholder","value","word","WordList","words","map","index","letter","isHanging","isTall","l","includes","Box","split","Boxes","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","Underline","Alpha","sort","sortWords","App","useState","setWord","updateWords","mode","setMode","onChange","e","target","preventDefault","arr","alphabetical","boxes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.623fc8ab.chunk.js","sourcesContent":["const WordInput = (props) => (\n    <form onSubmit={props.onSubmit}>\n        <div className=\"form-control\">\n            <input\n                onInput={props.onInput}\n                id=\"word\"\n                type=\"text\"\n                placeholder=\"Enter a word\"\n                value={props.word}\n            />\n        </div>\n    </form>\n);\n\nexport default WordInput;\n","const WordList = (props) => (\n    <ul className=\"word-list\">\n        {props.words.map((word, index) => (\n            <li key={index} className=\"word\">\n                {word}\n            </li>\n        ))}\n    </ul>\n);\n\nexport default WordList;\n","const className = (letter) => {\n    if (isHanging(letter)) {\n        return 'letter hanging';\n    }\n\n    if (isTall(letter)) {\n        return 'letter tall';\n    }\n\n    return 'letter';\n};\n\nconst isHanging = (l) => {\n    return ['q', 'y', 'p', 'g', 'j'].includes(l);\n};\n\nconst isTall = (l) => {\n    return ['t', 'd', 'f', 'h', 'l', 'b'].includes(l);\n};\n\nconst Box = (props) => {\n    return (\n        <li key={`box-${props.index}`}>\n            {props.word.split('').map((letter, index) => (\n                <p key={`letter-${index}`} className={className(letter)}></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Box;\n","import Box from './Box';\n\nconst shuffle = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\nconst Boxes = (props) => {\n    const words = shuffle(props.words);\n    return (\n        <ol>\n            {props.words.map((word, index) => (\n                <Box word={word} index={index} key={index} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Boxes;\n","const Underline = (props) => {\n    return (\n        <li key={props.index}>\n            {props.word.split('').map((letter, index) => (\n                <p key={index} className=\"underline\"></p>\n            ))}\n        </li>\n    );\n};\n\nexport default Underline;\n","import Underline from './Underline';\n\nfunction sortWords(words) {\n    return words.sort();\n}\n\nconst Alpha = (props) => {\n    const words = sortWords(props.words);\n\n    return (\n        <ol>\n            {words.map((word, index) => (\n                <Underline word={word} index={index} key={index} />\n            ))}\n        </ol>\n    );\n};\n\nexport default Alpha;\n","import './App.scss';\nimport WordInput from './components/WordInput';\nimport WordList from './components/WordList';\nimport { useState } from 'react';\nimport Boxes from './components/Boxes';\nimport Alpha from './components/Alpha';\n\nconst App = () => {\n    const [word, setWord] = useState('');\n    const [words, updateWords] = useState([]);\n    const [mode, setMode] = useState('alphabetical');\n\n    const onInput = (e) => {\n        setWord(e.target.value);\n    };\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        updateWords((arr) => [...arr, word]);\n        setWord('');\n    };\n\n    const onChange = (e) => {\n        setMode(e.target.value);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <select onChange={onChange} className=\"no-print\">\n                    <option value=\"alphabetical\">Alphabetical</option>\n                    <option value=\"boxes\">Boxes</option>\n                </select>\n                <h1>{mode}</h1>\n            </header>\n            <section className=\"no-print\">\n                <WordInput onInput={onInput} onSubmit={onSubmit} word={word} />\n            </section>\n            <section className=\"output\">\n                <WordList words={words} />\n                {\n                    {\n                        alphabetical: <Alpha words={words} />,\n                        boxes: <Boxes words={words} />\n                    }[mode]\n                }\n            </section>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}